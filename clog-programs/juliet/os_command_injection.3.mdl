ArgIndexRange(0).
ArgIndexRange(i) :- ArgIndexRange(j), i = j + 1, LT(i, 100).
# For vararg functions, just mark a fixed range of arguments as tainted

TaintSourceArg("fgets", 0).
TaintSourceReturn("fgets").
TaintSourceArg("fgetws", 0).
TaintSourceReturn("fgetws").
TaintSourceArg("recv", 1).
TaintSourceReturn("getenv").

TaintPropagationArgToArg("memcpy", 1, 0).
TaintPropagationArgToRet("memcpy", 1).

TaintSink("system", 0).
TaintSink("execl", i) :- ArgIndexRange(i).
TaintSink("execlp", i) :- ArgIndexRange(i).
TaintSink("popen", 0).


# Source rules
ExprPointsToTaintedMem($v) :- <: $f (.., $v ,..) :>, f = c_name($f), i = c_index($v), TaintSourceArg(f, i).

# Propagation rules
ExprPointsToTaintedMem(w) :- w <: $v + $_ :>, ExprPointsToTaintedMem($v).
ExprPointsToTaintedMem($v) :- w <: $v + $_ :>, ExprPointsToTaintedMem(w).
ExprPointsToTaintedMem(v) :- v <: ($t) $v :>, ExprPointsToTaintedMem($v).
ExprPointsToTaintedMem($v) :- w <: ($t) $v :>, ExprPointsToTaintedMem(w).

VarPointsToTaintedMem(w, v) :- ExprPointsToTaintedMem(w), v = c_decl(w), node_to_id(v) != 0.
VarPointsToTaintedMem(cfg_loc, v) :- cfg_loc <: $v = $e :>, ExprPointsToTaintedMem($e), v = c_decl($v), node_to_id(v) != 0.
VarPointsToTaintedMem($v, $v) :- <: $t $v = $e :>, ExprPointsToTaintedMem($e).

ExprPointsToTaintedMem($v) :- VarPointsToTaintedMem($v, v), <: $v :>, v = c_decl($v), node_to_id(v) != 0, name = c_name(v).

VarDef(s, d) :- s <: $u = $_ :> , d = c_decl($u), node_to_id(d) != 0.

VarPointsToTaintedMem(cfg_loc_succ, v) :- VarPointsToTaintedMem(cfg_loc, v), CFG_SUCC(cfg_loc, cfg_loc_succ), NOT(VarDef(cfg_loc_succ, v)).



ExprPointsToTaintedMem($v) :- <: $f (.., $v, .., $w, ..) :>,
                               n = c_name($f),
                               TaintPropagationArgToArg(n, src_i, dst_i),
                               src_i == c_index($w),
                               dst_i == c_index($v),
                               ExprPointsToTaintedMem($w).

ExprPointsToTaintedMem(c) :- c <: $f (.., $w, ..) :>,
                               n = c_name($f),
                               TaintPropagationArgToRet(n, src_i),
                               src_i == c_index($w),
                               ExprPointsToTaintedMem($w).


# Inter-procedural rules

InterProceduralFlowCall($callee, src_cfg_loc, entry, $e, $w) :- src_cfg_loc <: $c(.., $e, ..) :>,
                                 $callee = c_decl($c),
                                 node_to_id($callee) != 0,
                                 <: $rt $callee(.., $pt $w, ..) { .. } :>,
                                 i = c_index($e),
                                 GTE(i, 0),
                                 i == c_index($w),
                                 entry = c_cfg_entry($callee),
                                 node_to_id(entry) != 0.


VarPointsToTaintedMem(dst_loc, w) :- InterProceduralFlowCall(_, _, dst_loc, e, w), ExprPointsToTaintedMem(e), n = c_name(w).

ExprPointsToTaintedMem(e) :- InterProceduralFlowCall(callee, _, _, e, w), CFG_EXIT(callee, exit), VarPointsToTaintedMem(exit, w).

ExprPointsToTaintedMem(e) :- InterProceduralFlowReturn(_, e, src_expr), ExprPointsToTaintedMem(src_expr).

ExprPointsToTaintedMem(call_expr), D1(name) :- call_expr <: $callee(..) :>, name = c_name($callee), TaintSourceReturn(name).

InterProceduralFlowReturn(src_cfg_loc, dst_cfg_loc, $e) :- dst_cfg_loc <: $c(..) :>,
                                                           $callee = c_decl($c),
                                                           node_to_id($callee) != 0,
                                                           <: $rt $callee(..) { .. } :>,
                                                           src_cfg_loc <: return $e; :>,
                                                           c_is_ancestor($callee, src_cfg_loc) != 0.



CommandInjection(c) :- c <: $f(.., $v, .. ) :>, ExprPointsToTaintedMem($v), i = c_index($v), n = c_name($f), TaintSink(n, i).

# Intentionally using c_src_line_end instead of c_src_line_start. When the function name is a macro, then
# line start will point to the definition site of the macro.
WarnCommandInjection(f, l, 0, "OSCommandInjection") :- CommandInjection(loc), f = c_src_file(loc), l = c_src_line_end(loc).#, c = c_src_col_start(loc).


OUTPUT('WarnCommandInjection, "clog.analysis.csv", "csv").

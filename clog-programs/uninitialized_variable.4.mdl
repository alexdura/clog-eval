# All declared variables without an initializer
VarDeclNoInit(d, $x) :- d <: $t .. , $x, ..; :>, NOT(PtrDeclNoInit(d, $x)), NOT(ArrayDeclNoInit(d, $x)).#, debug = c_cfg(d).
PtrDeclNoInit(d, $x) :- d <: $t .., *$x, ..; :>.
ArrayDeclNoInit(d, $x) :- d <: $t .., $x[$_], ..; :>.

VarDeclInit(d, $x) :- d <: $t .. , $x = $e, ..; :>, debug = c_cfg(d).

# All uses of a variable where the variable is not assigned
VarUse($u, d) :- <: $u :>, d = c_decl($u), node_to_id(d) != 0, VarDeclNoInit(_, d), NOT(VarAssign(_, _, $u)).

# All assignments of a variable
VarAssign(s, d, $u) :- s <: $u = $_ :> , d = c_decl($u), node_to_id(d) != 0.

# CFG successor of a variable that does not assign the variable. The chain ends
# at the first assignment
VarDeclSucc(v, s) :- VarDeclNoInit(s, v).
VarDeclSucc(v, succ), W(s, succ) :- VarDeclSucc(v, s), CFG_SUCC(s, succ), NOT(VarAssign(succ, v, _)).

#
VarUseNoAssign(u) :- VarUse(u, v), VarDeclSucc(v, u).

UninitializedUse(f, l, c, "core.uninitialized.Assign") :- VarUseNoAssign(v),
		    f = io_relative_path(c_src_file(v)),
		    l = c_src_line_start(v),
		    c = c_src_col_start(v).


PtrAlias(p, q), PtrAlias(q, p) :- <: $p = $q :>, p = c_decl($p), q = c_decl($q), PtrDecl(_, p), PtrDecl(_, q).

PtrDecl(d, $p) :- d <: $t .., *$p, .. ; :>.
PtrDecl(d, $p), PtrAlloc(d, $p) :- d <: $t .., $p[$_], ..; :>.
# PtrDeclInit(d, $p, $e) :- d <: $t .., *$p = $e, .. ; :>.

PtrAlloc(s, p) :- s <: $v = __builtin_alloca(..) :>, p = c_decl($v), PtrDecl(_, p).
PtrAlloc(s, p) :- s <: $v = alloca(..) :>, p = c_decl($v), PtrDecl(_, p).
PtrAlloc(s, p) :- s <: $v = malloc(..) :>, p = c_decl($v), PtrDecl(_, p).

PtrDecl(s, $p), PtrAlloc(s, $p) :- s <: $t .., *$p = __builtin_alloca(..) , ..; :>.
PtrDecl(s, $p), PtrAlloc(s, $p) :- s <: $t .., *$p = alloca(..) , ..; :>.
PtrDecl(s, $p), PtrAlloc(s, $p) :- s <: $t .., *$p = malloc(..) , ..; :>.

# Patterns for matching casts
PtrAlloc(s, p) :- s <: $v = ($t1) __builtin_alloca(..) :>, p = c_decl($v), PtrDecl(_, p).
PtrAlloc(s, p) :- s <: $v = ($t1) alloca(..) :>, p = c_decl($v), PtrDecl(_, p).
PtrAlloc(s, p) :- s <: $v = ($t1) malloc(..) :>, p = c_decl($v), PtrDecl(_, p).

PtrAlloc(s, $p), PtrDecl(s, $p) :- s <: $t .., *$p = ($t1) __builtin_alloca(..) , ..; :>.
PtrAlloc(s, $p), PtrDecl(s, $p) :- s <: $t .., *$p = ($t1) alloca(..) , ..; :>.
PtrAlloc(s, $p), PtrDecl(s, $p) :- s <: $t .., *$p = ($t1) malloc(..) , ..; :>.

PtrAlloc(s, p) :- PtrAlloc(s, q), PtrAlias(p, q).

PtrMemWrite(s, p, $v) :- s <: *$v = $u :>, p = c_decl($v), PtrAlloc(_, p).
PtrMemWrite(s, p, $v) :- s <: $v[$i] = $u :>, p = c_decl($v), PtrAlloc(_, p).

PtrMemRead(s, p) :- s <: *$v :>, NOT(PtrMemWrite(_, _, $v)), p = c_decl($v), PtrAlloc(_, p).
PtrMemRead(s, p) :- s <: $v[$i] :>, NOT(PtrMemWrite(_, _, $v)), p = c_decl($v), PtrAlloc(_, p).

# The memory pointed by p is written to at least on one path leading to s.
PtrMemWriteSucc(s, p) :- PtrMemWrite(s, p, _).
PtrMemWriteSucc(succ, p) :- PtrMemWriteSucc(s, p), CFG_SUCC(s, succ).

# There is no memory write to p before reaching s
PtrMemReadNoWrite(s) :- PtrMemRead(s, p), NOT(PtrMemWriteSucc(s, p)).

UninitializedUse(f, l, c, "core.uninitialized.Assign") :- PtrMemReadNoWrite(u), f = io_relative_path(c_src_file(u)),
                                 l = c_src_line_start(u), c = c_src_col_start(u).

OUTPUT('UninitializedUse, "clog.analysis.csv", "csv").

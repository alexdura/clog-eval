
# VarDef: at statement s, the variable declared by d is written using the variable reference $u

VarAssign(cfg_loc, d, $e) :- cfg_loc <: $v = $e :>, d = c_decl($v), node_to_id(d) != 0.
VarAssign($v, $v, $e) :-  <: $t $v = $e :>.

StaticNullExpr(e) :- e <: 0 :>.
# NULL is likely a #define, but let's assume it is not
StaticNullExpr(e) :- e <: NULL :>.
StaticNullExpr(e) :- e <: $l = $r :>, StaticNullExpr($r).
StaticNullExpr(e) :- e <: ($t) $r :>, StaticNullExpr($r).

NullExpr(e) :- StaticNullExpr(e).

# Replace the rule NullExpr(e) :- e <: $l = $r :>, NullExpr($r).
# with another rule that allows for 'atNode' matching
NullExpr(e) :- NullExpr($r), e = c_parent($r), node_to_id(e) != 0, e <: $l = $r :>.
# Replace the NullExpr(e) :- e <: ($t) $r :>, NullExpr($r).
# with another rule that allows for 'atNode' matching
NullExpr(e) :- NullExpr($r), e = c_parent($r), node_to_id(e) != 0, e <: ($t) $r :>.

NullVar(cfg_loc, d) :- NullExpr(e), VarAssign(cfg_loc, d, e).
NullExpr($v) :- NullVar($v, d), <: $v :>, d = c_decl($v).

NullVar(succ_loc, d) :- NullVar(loc, d), CFG_SUCC(loc, succ_loc), NOT(VarAssign(succ_loc, d, _)), NOT(NotNullSucc(succ_loc, d)).

NullTest(loc, d) :- loc <: !$v :>, d = c_decl($v).
NullTest(loc, d) :- loc <: $v == $e :>, StaticNullExpr($e), d = c_decl($v).

NotNullSucc(s, d) :- <: if ($cond) $_ else $false :>, NullTest($cond, d), s = c_cfg_entry($false).

NotNullSucc(s, d) :- <: if ($v) $true :>, d = c_decl($v), node_to_id(d) != 0, s = c_cfg_entry($true).
NotNullSucc(s, d) :- <: if ($v) $true else $_ :>, d = c_decl($v), node_to_id(d) != 0, s = c_cfg_entry($true).


NotNullSucc(s, d) :- <: ($v != $e) && $other :>, d = c_decl($v), node_to_id(d) != 0, s = c_cfg_entry($other).

NotNullSucc(s, d) :- <: if ($v != $e) $true else $_ :>, d = c_decl($v), StaticNullExpr($e), node_to_id(d) != 0, s = c_cfg_entry($true).
NotNullSucc(s, d) :- <: if ($v != $e) $true :>, d = c_decl($v), StaticNullExpr($e), node_to_id(d) != 0, s = c_cfg_entry($true).

NotNullSucc(s, d) :- loc <: if ($v == $e) return ; :>, CFG_SUCC(loc, s), d = c_decl($v), node_to_id(d) != 0, StaticNullExpr($e).
NotNullSucc(s, d) :- loc <: if ($v == $e) { .. return ; .. } :>, CFG_SUCC(loc, s), d = c_decl($v), node_to_id(d) != 0, StaticNullExpr($e).


# NullVarDebug(l, c, name) :- NullVar(cfg_loc, d), name = c_name(d), l = c_src_line_start(cfg_loc), c = c_src_col_start(cfg_loc).

NullPtrDeref(cfg_loc) :- NullVar(cfg_loc, v), cfg_loc <: *$v :>, v == c_decl($v).
NullPtrDeref(cfg_loc) :- NullVar(cfg_loc, v), cfg_loc <: $v[$_] :>, v == c_decl($v).
NullPtrDeref(cfg_loc) :- NullVar(cfg_loc, v), cfg_loc <: $v -> $f :>, v == c_decl($v).




### Interprocedural analysis

### Flow through calls
InterProceduralFlowCall($callee, src_cfg_loc, entry, $e, $w) :- src_cfg_loc <: $c(.., $e, ..) :>,
                                 $callee = c_decl($c),
                                 node_to_id($callee) != 0,
                                 <: $rt $callee(.., $pt $w, ..) { .. } :>,
                                 i = c_index($e),
                                 GTE(i, 0),
                                 i == c_index($w),
                                 entry = c_cfg_entry($callee),
                                 node_to_id(entry) != 0.

InterProceduralFlowReturn(src_cfg_loc, dst_cfg_loc, $e) :- dst_cfg_loc <: $c(..) :>,
                                                           $callee = c_decl($c),
                                                           node_to_id($callee) != 0,
                                                           <: $rt $callee(..) { .. } :>,
                                                           @ $callee src_cfg_loc <: return $e; :>.


# Interprocedural rules
# TODO: Add call-site sensitivity
# NullVar(entry, d) :- InterProceduralFlowCall(_, _, entry, e, d), NullExpr(e).
# NullExpr(dst_loc) :- InterProceduralFlowReturn(_, dst_loc, e), NullExpr(e).


NullPtrDerefDetail(file, l, c, "NullPointerDereference") :- NullPtrDeref(loc), file = c_src_file(loc),
                                                            l = c_src_line_start(loc), c = c_src_col_start(loc).

### End of interprocedural analysis


OUTPUT('NullPtrDerefDetail, "clog.analysis.csv", "csv").